from queue import PriorityQueue

# Define the successor function
def successors(x, y, z, state):
    (a, b, c) = state
    return [(x, b, c), (a, y, c), (a, b, z), (0, b, c), (a, 0, c), (a+b-min(a+b,y), min(a+b,y), c), (a+b-min(a+b,x), min(a+b,x), c), (min(a+b,x), a+b-min(a+b,y), c), (0, a+b, c), (a, b+c-min(b+c,z), min(b+c,z)), (a, b+c-min(b+c,y), min(b+c,y)), (a, min(b+c,x), b+c-min(b+c,x)), (a, 0, b+c), (a+c-min(a+c,z), b, min(a+c,z)), (a+c-min(a+c,y), b, min(a+c,y)), (min(a+c,x), b, a+c-min(a+c,x)), (0, b, a+c)]

# Define the heuristic function
def heuristic(state, z):
    (x, y, w) = state
    return abs(x-z) + abs(y-z) + abs(w-z)

# Define the A* algorithm
def water_jug(x, y, z):
    q = PriorityQueue()
    q.put((0, (0, 0, x), []))
    visited = set()
    while not q.empty():
        (cost, state, path) = q.get()
        if state in visited:
            continue
        visited.add(state)
        if state[0] == z:
            return len(path)
        for succ in successors(x, y, z, state):
            new_cost = cost + 1
            new_path = path + [state]
            q.put((new_cost + heuristic(succ, z), succ, new_path))
    return None

# Example 1
x = 4
y = 3
z = 2
result = water_jug(x, y, z)
if result is None:
    print(f"No solution found for jugs {x}, {y}, {z}")
else:
    print(f"Solution found in {result} steps for jugs {x}, {y}, {z}")

# Example 2
x = 5
y = 8
z = 3
result = water_jug(x, y, z)
if result is None:
    print(f"No solution found for jugs {x}, {y}, {z}")
else:
    print(f"Solution found in {result} steps for jugs {x}, {y}, {z}")

# Example 3
x = 6
y = 9
z = 2
result = water_jug(x, y, z)
if result is None:
    print(f"No solution found for jugs {x}, {y}, {z}")
else:
    print(f"Solution found in {result} steps for jugs {x}, {y}, {z}")
