import heapq

class Node:
    def __init__(self, state, path_cost, heuristic_cost):
        self.state = state
        self.path_cost = path_cost
        self.heuristic_cost = heuristic_cost

    def __lt__(self, other):
        return (self.path_cost + self.heuristic_cost) < (other.path_cost + other.heuristic_cost)

def a_star_search(capacities, target):
    def is_goal(state):
        return state[-1] == target

    def successors(state):
        successors = []
        for i in range(len(state)):
            for j in range(len(state)):
                if i != j:
                    # pour as much water as possible from i to j
                    amount = min(state[i], capacities[j] - state[j])
                    if amount > 0:
                        successor_state = state.copy()
                        successor_state[i] -= amount
                        successor_state[j] += amount
                        successors.append((successor_state, amount))
        return successors

    def heuristic(state):
        return abs(state[-1] - target)

    initial_node = Node([0] * len(capacities), 0, heuristic([0] * len(capacities)))
    fringe = [(initial_node.path_cost + initial_node.heuristic_cost, initial_node)]
    visited = set()

    while fringe:
        _, current_node = heapq.heappop(fringe)
        current_state = current_node.state
        if is_goal(current_state):
            return current_node.path_cost
        if current_state in visited:
            continue
        visited.add(tuple(current_state))
        for successor_state, step_cost in successors(current_state):
            new_node = Node(successor_state, current_node.path_cost + step_cost, heuristic(successor_state))
            heapq.heappush(fringe, (new_node.path_cost + new_node.heuristic_cost, new_node))

    return -1

def main():
    with open('input.txt') as f:
        capacities = list(map(int, f.readline().strip().split(',')))
        target = int(f.readline().strip())
    print(a_star_search(capacities, target))

if __name__ == '__main__':
    main()
