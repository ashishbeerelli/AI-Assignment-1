import sys
import os
import copy
import networkx as nx
import matplotlib.pyplot as plt
# First we need to open the file and read the data and then create 2 variables neighbours and variables 
with open("input.txt", "r") as f:
    info = f.readlines()
neighbours = {}
variables = {}
# Open the file and read the data
with open("input.txt", "r") as f:
    data = f.readlines()
# Create the variables
neighbours = {}
variables = {}

# Process each line of data
for line in data:
    if line.startswith('#') or line.strip() == "":
        continue
    elif line.startswith('c'):
        colors = int(''.join(filter(str.isdigit, line)))
        continue
    node1, node2 = map(int, line.strip().split(","))
    # Updating the neighbours
    if node1 not in neighbours:
        neighbours[node1] = []
    neighbours[node1].append(node2)
    if node2 not in neighbours:
        neighbours[node2] = []
    neighbours[node2].append(node1)
    # Updating the variables
    if node1 not in variables:
        variables[node1] = [None, list(range(1, colors+1))]
    if node2 not in variables:
        variables[node2] = [None, list(range(1, colors+1))]
        
G = nx.Graph()
for node, neighbours_list in neighbours.items():
    G.add_node(node)
    for neighbour in neighbours_list:
        G.add_edge(node, neighbour)

# Define a class to represent a state
class color:
    curr: int
    assigned: dict
    variables: dict

    def __init__(self, curr, assigned, variables):
        self.curr = curr
        self.assigned = assigned
        self.variables = variables

    
    # Create a function to print the variables with their values
    def printvar(self):
        for var in self.variables:
            print(var,"has color", self.variables[var][0])

   
        
        colors_map = {1: 'blue', 2: 'yellow', 3: 'red', 4: 'white', 5: 'orange', 6: 'silver'}
        for node, (color, _) in self.variables.items():
            if color is not None:
               G.nodes[node]['color'] = colors_map[color]
        node_colors = [colors_map[color] for node, (color, _) in self.variables.items() if color is not None]
        nx.draw(G, with_labels=True, node_color=node_colors)
        plt.show()
        
        
            
def intersection(a, b):
    return list(set(a) & set(b)) if set(a) & set(b) else -1


#backtracking search    
def backtrack_search(state):
    
    assigned_neighbours = [n for n in neighbours[state.curr] if n in state.assigned]

    if assigned_neighbours != -1:
        for domain_val in state.variables[state.curr][1]:
            is_assignable = all(domain_val != state.variables[assigned_var][0] for assigned_var in assigned_neighbours)

            if is_assignable:
               state.variables[state.curr][0] = domain_val
               state.variables[state.curr][1].remove(domain_val)
               state.assigned.append(state.curr)
               break
    else:
      value_to_assign = state.variables[state.curr][1][0]
      state.variables[state.curr][0] = value_to_assign
      state.variables[state.curr][1].remove(value_to_assign)
      state.assigned.append(state.curr)
    
    if len(state.assigned) == len(neighbours):
        state.printvar()
        raise SystemExit("Solution Found")
    if state.variables[state.curr][0] is None:
        return
    else:
# Minimum Remaining Value - Chooses the variable with the least number of values in its domain
        not_assigned = {}
        temp = list(set(neighbours[state.curr]).difference(state.assigned))
        for var in temp:
            if var in state.variables:
                not_assigned[var] = state.variables[var][1]
# Sorts the neighbours based on their domain lengths
        sorted_items = sorted(not_assigned.items(), key=lambda x: len(x[1]))
        not_assigned.clear()
        not_assigned.update(sorted_items)
        for var in not_assigned:
            backtrack_search(color(copy.deepcopy(var),copy.deepcopy(state.assigned),copy.deepcopy(state.variables)))     

curr_state = color(2,[],copy.deepcopy(variables))
#calling backtracking function
backtrack_search(curr_state)
